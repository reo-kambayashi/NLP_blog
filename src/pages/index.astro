---
import Layout from "../layouts/Layout.astro";
import PaperCardMD from "../components/PaperCardMD.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import { sortPapersByDate, calculatePaperStats } from "../utils/paper";
import { preparePapersForSearch } from "../utils/search";

type Paper = CollectionEntry<"papers">;

// Content Collectionsから論文を取得
const papers: Paper[] = await getCollection("papers");

// 日付でソート（新しい順）
const sortedPapers = sortPapersByDate(papers);

// 統計情報を計算
const stats = calculatePaperStats(papers);

// 検索用データを準備
const searchablePapers = preparePapersForSearch(papers);
---

<Layout title="論文メモ">
  <div class="hero">
    <h1>Papers</h1>
    <p class="subtitle">{stats.total} papers collected</p>

    <!-- 統計情報 -->
    <div class="stats">
      <div class="stat-item">
        <span class="stat-number">{stats.thisYear}</span>
        <span class="stat-label">今年</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">{stats.thisMonth}</span>
        <span class="stat-label">今月</span>
      </div>
    </div>
  </div>

  <!-- 検索・フィルター -->
  <div class="controls">
    <div class="search-container">
      <input
        type="text"
        id="search"
        placeholder="論文タイトルや内容を検索..."
        class="search-input"
      />
      <div class="search-suggestion" id="searchSuggestion">
        タイトル、要約、メモ内容から検索できます
      </div>
    </div>
    <div class="filter-container">
      <select id="yearFilter" class="filter-select">
        <option value="">全ての年</option>
      </select>
    </div>
  </div>

  <!-- 検索結果統計 -->
  <div class="search-stats" id="searchStats" style="display: none;">
    <span id="searchStatsText"></span>
    <button class="clear-search" id="clearSearch" style="display: none;"
      >検索をクリア</button
    >
  </div>

  <section class="papers-list">
    {
      sortedPapers.length === 0 ? (
        <div class="empty-state">
          <div class="empty-icon">📚</div>
          <p>まだ論文が追加されていません。</p>
          <p>
            src/content/papers/
            ディレクトリにMarkdownファイルを追加してください。
          </p>
        </div>
      ) : (
        <div class="papers-grid" id="papersGrid">
          {sortedPapers.map((paper: Paper, index: number) => (
            <div
              class="paper-card-wrapper"
              style={`--card-index: ${index}; animation-delay: ${index * 0.1}s`}
              data-paper-id={paper.id}
              data-title={paper.data.title.toLowerCase()}
              data-year={new Date(paper.data.date).getFullYear()}
              data-content={
                paper.body ? paper.body.toLowerCase().substring(0, 1500) : ""
              }
            >
              <PaperCardMD paper={paper} />
            </div>
          ))}
        </div>
      )
    }
  </section>

  <!-- JavaScriptを直接埋め込み -->
  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      // Fuse.jsが読み込まれるまで待つ
      function waitForFuse() {
        if (typeof Fuse === "undefined") {
          console.log("Waiting for Fuse.js to load...");
          setTimeout(waitForFuse, 100);
          return;
        }
        initializeSearch();
      }

      function initializeSearch() {
        // DOM要素の取得
        const searchInput = document.getElementById("search");
        const yearFilter = document.getElementById("yearFilter");
        const papersGrid = document.getElementById("papersGrid");
        const paperCards = document.querySelectorAll(".paper-card-wrapper");
        const searchStats = document.getElementById("searchStats");
        const searchStatsText = document.getElementById("searchStatsText");
        const clearSearch = document.getElementById("clearSearch");
        const searchSuggestion = document.getElementById("searchSuggestion");

        if (!searchInput || !yearFilter || !papersGrid) {
          console.error("Required DOM elements not found");
          return;
        }

        console.log("Initializing search with", paperCards.length, "papers");

        // モバイル判定
        const isMobile = window.innerWidth <= 768;

        // 検索用データの準備
        const searchablePapers = Array.from(paperCards).map((card, index) => {
          const title = card.getAttribute("data-title") || "";
          const content = card.getAttribute("data-content") || "";
          console.log(
            `Paper ${index}: title="${title.substring(0, 50)}...", content="${content.substring(0, 100)}..."`
          );

          return {
            index: index,
            element: card,
            title: title,
            year: card.getAttribute("data-year") || "",
            content: content,
            id: card.getAttribute("data-paper-id") || "",
          };
        });

        // Fuse.js設定
        const fuseOptions = {
          keys: [
            { name: "title", weight: 0.7 },
            { name: "content", weight: 0.3 },
          ],
          threshold: 0.4, // 0.3から0.4に緩和（より多くの結果を許可）
          distance: 200, // 100から200に増加（より遠い位置のマッチも許可）
          minMatchCharLength: 1, // 2から1に減少（1文字のマッチも許可）
          includeScore: true,
          includeMatches: true,
          ignoreLocation: true, // falseからtrueに変更（位置を無視）
        };

        console.log("Creating Fuse instance with options:", fuseOptions);
        const fuse = new Fuse(searchablePapers, fuseOptions);
        console.log("Fuse instance created successfully");

        // 年フィルターの選択肢を動的に生成
        const years = [
          ...new Set(searchablePapers.map((paper) => paper.year)),
        ].sort((a, b) => b - a);
        years.forEach((year) => {
          if (year) {
            const option = document.createElement("option");
            option.value = year;
            option.textContent = year + "年";
            yearFilter.appendChild(option);
          }
        });

        // モバイル対応
        if (isMobile) {
          searchInput.setAttribute("autocomplete", "off");
          searchInput.setAttribute("autocorrect", "off");
          searchInput.setAttribute("autocapitalize", "off");
          searchInput.setAttribute("spellcheck", "false");

          searchInput.addEventListener("focus", () => {
            searchSuggestion.style.display = "none";
            setTimeout(() => {
              searchInput.scrollIntoView({
                behavior: "smooth",
                block: "center",
              });
            }, 300);
          });

          searchInput.addEventListener("blur", () => {
            if (!searchInput.value) {
              searchSuggestion.style.display = "block";
            }
          });
        }

        // 検索とフィルタリング機能
        let searchTimeout;
        function performSearch() {
          if (searchTimeout) clearTimeout(searchTimeout);

          const delay = isMobile ? 150 : 50;

          searchTimeout = setTimeout(() => {
            const query = searchInput.value.trim();
            const selectedYear = yearFilter.value;

            console.log("Performing search:", { query, selectedYear });

            let filteredPapers = searchablePapers;

            // Fuse.js検索
            if (query) {
              try {
                const searchResults = fuse.search(query);
                console.log(
                  "Search results:",
                  searchResults.length,
                  "matches found"
                );
                filteredPapers = searchResults.map((result) => result.item);
              } catch (error) {
                console.error("Search error:", error);
                // フォールバック：シンプルな文字列検索（大文字小文字を区別しない）
                const lowerQuery = query.toLowerCase();
                filteredPapers = searchablePapers.filter(
                  (paper) =>
                    paper.title.toLowerCase().includes(lowerQuery) ||
                    paper.content.toLowerCase().includes(lowerQuery)
                );
                console.log(
                  "Fallback search found:",
                  filteredPapers.length,
                  "matches"
                );
              }
            }

            // 年フィルタリング
            if (selectedYear) {
              filteredPapers = filteredPapers.filter(
                (paper) => paper.year === selectedYear
              );
            }

            console.log("Final filtered results:", filteredPapers.length);

            // 結果の表示・非表示
            const visibleIndices = new Set(
              filteredPapers.map((paper) => paper.index)
            );

            paperCards.forEach((card, index) => {
              if (visibleIndices.has(index)) {
                card.style.display = "block";
                card.style.animation = "fadeInUp 0.3s ease forwards";
              } else {
                card.style.display = "none";
              }
            });

            // 検索統計の更新
            updateSearchStats(
              query,
              selectedYear,
              searchablePapers.length,
              filteredPapers.length
            );

            // 検索候補の非表示
            if (query) {
              searchSuggestion.style.display = "none";
            } else if (!isMobile || document.activeElement !== searchInput) {
              searchSuggestion.style.display = "block";
            }
          }, delay);
        }

        // 検索統計の更新
        function updateSearchStats(query, year, total, filtered) {
          if (query || year) {
            searchStats.style.display = "block";
            clearSearch.style.display = "inline-block";

            let statsText = `${filtered}件 / ${total}件を表示`;
            if (query && year) {
              statsText = `"${query}" かつ ${year}年の論文: ${filtered}件`;
            } else if (query) {
              statsText = `"${query}" の検索結果: ${filtered}件`;
            } else if (year) {
              statsText = `${year}年の論文: ${filtered}件`;
            }

            searchStatsText.textContent = statsText;
          } else {
            searchStats.style.display = "none";
            clearSearch.style.display = "none";
          }
        }

        // 検索クリア機能
        function clearSearchAndFilters() {
          searchInput.value = "";
          yearFilter.value = "";
          searchStats.style.display = "none";
          clearSearch.style.display = "none";
          searchSuggestion.style.display = "block";

          paperCards.forEach((card) => {
            card.style.display = "block";
            card.style.animation = "fadeInUp 0.3s ease forwards";
          });
        }

        // イベントリスナー
        searchInput.addEventListener("input", performSearch);
        yearFilter.addEventListener("change", performSearch);
        clearSearch.addEventListener("click", clearSearchAndFilters);

        // ページロード時のアニメーション
        paperCards.forEach((card, index) => {
          setTimeout(
            () => {
              card.classList.add("animate-in");
            },
            index * (isMobile ? 50 : 100)
          );

          card.style.animationDelay = `${index * (isMobile ? 0.03 : 0.05)}s`;
        });

        console.log("Search initialization complete");
      }

      // Fuse.jsの読み込みを待つ
      waitForFuse();
    });
  </script>
</Layout>

<style>
  .hero {
    text-align: center;
    padding: 4rem 0 3rem 0; /* 改善: より大きなパディング */
    margin-bottom: 3.5rem; /* 改善: より大きなマージン */
    position: relative;
    background: linear-gradient(
      135deg,
      rgba(74, 158, 255, 0.04) 0%,
      /* 改善: より薄い背景グラデーション */ rgba(74, 158, 255, 0.01) 50%,
      transparent 100%
    );
    border-radius: 12px; /* 改善: 角を丸く */
    border: 1px solid rgba(255, 255, 255, 0.06); /* 改善: 薄いボーダー追加 */
  }

  .hero::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 1px;
    background: linear-gradient(90deg, transparent, #4a9eff, transparent);
  }

  .hero h1 {
    font-size: 3rem; /* 改善: より大きなタイトル */
    margin: 0 0 1rem 0; /* 改善: マージン調整 */
    font-weight: 300;
    color: #ffffff;
    letter-spacing: -0.03em; /* 改善: 文字間調整 */
    font-family: "Plus Jakarta Sans", sans-serif;
    line-height: 1.05; /* 改善: タイトル用の行間 */
    position: relative;
  }

  .hero h1::before {
    content: "";
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    width: 40px;
    height: 2px;
    background: linear-gradient(90deg, #4a9eff, #66b3ff);
    opacity: 0.6;
  }

  .subtitle {
    color: #b8b8b8; /* 改善: より明るいサブタイトル色 */
    font-size: 1.125rem; /* 改善: サブタイトルを大きく */
    font-weight: 300;
    margin: 0 0 2.5rem 0; /* 改善: マージン調整 */
    letter-spacing: 0.3px; /* 改善: 文字間調整 */
    font-family: "Plus Jakarta Sans", sans-serif;
    opacity: 0.9; /* 改善: 透明度で階層を表現 */
  }

  .stats {
    display: flex;
    justify-content: center;
    gap: 3rem; /* 改善: ギャップを増加 */
    margin-top: 2.5rem; /* 改善: マージン調整 */
    flex-wrap: wrap; /* 改善: レスポンシブ対応 */
  }

  .stat-item {
    text-align: center;
    position: relative;
    padding: 2rem 2.5rem; /* 改善: パディング増加 */
    background: linear-gradient(135deg, #111111 0%, #0a0a0a 100%);
    border: 1px solid rgba(255, 255, 255, 0.12); /* 改善: ボーダーを少し濃く */
    border-radius: 8px; /* 改善: 角を丸く */
    transition: all 0.4s ease;
    min-width: 120px; /* 改善: 最小幅を増加 */
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); /* 改善: シャドウ追加 */
  }

  .stat-item::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(74, 158, 255, 0.05),
      transparent
    );
    transition: left 0.6s ease;
  }

  .stat-item:hover {
    border-color: rgba(74, 158, 255, 0.4);
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(74, 158, 255, 0.15);
  }

  .stat-item:hover::before {
    left: 100%;
  }

  .stat-item::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, #4a9eff, #66b3ff);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.4s ease;
  }

  .stat-item:hover::after {
    transform: scaleX(1);
  }

  .stat-number {
    display: block;
    font-size: 2.25rem; /* 改善: より大きな数字 */
    font-weight: 700; /* 改善: より太い数字 */
    color: #5cc7ff; /* 改善: より明るいアクセント色 */
    font-family: "Plus Jakarta Sans", sans-serif;
    margin-bottom: 0.75rem; /* 改善: マージン調整 */
    line-height: 1;
    transition: all 0.3s ease;
  }

  .stat-item:hover .stat-number {
    color: #7dd3ff; /* 改善: ホバー時のより明るい色 */
    transform: scale(1.1); /* 改善: より大きなスケール */
  }

  .stat-label {
    display: block;
    font-size: 0.8rem;
    color: #aaaaaa;
    font-weight: 400;
    letter-spacing: 0.75px;
    text-transform: uppercase;
  }

  .controls {
    display: flex;
    justify-content: center;
    gap: 2rem; /* 改善: ギャップ増加 */
    margin-bottom: 3rem; /* 改善: マージン増加 */
    flex-wrap: wrap;
    padding: 0 1rem; /* 改善: パディング追加 */
  }

  .search-container,
  .filter-container {
    position: relative;
  }

  .search-container::before,
  .filter-container::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      45deg,
      rgba(74, 158, 255, 0.1) 0%,
      transparent 50%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    border-radius: 0;
  }

  .search-container:hover::before,
  .filter-container:hover::before {
    opacity: 1;
  }

  .search-input,
  .filter-select {
    background: linear-gradient(135deg, #111111 0%, #0a0a0a 100%);
    border: 1px solid rgba(255, 255, 255, 0.15); /* 改善: より濃いボーダー */
    color: #ffffff;
    padding: 1.125rem 1.5rem; /* 改善: パディング増加 */
    border-radius: 8px; /* 改善: 角を丸く */
    font-family: "Plus Jakarta Sans", sans-serif;
    font-size: 1rem; /* 改善: フォントサイズ調整 */
    transition: all 0.3s ease;
    min-width: 240px; /* 改善: 最小幅を増加 */
    position: relative;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2); /* 改善: シャドウ追加 */
  }

  .search-input:focus,
  .filter-select:focus {
    outline: none;
    border-color: rgba(74, 158, 255, 0.6);
    box-shadow: 0 0 0 3px rgba(74, 158, 255, 0.1);
    transform: translateY(-2px);
  }

  .search-input::placeholder {
    color: #888888;
    transition: color 0.3s ease;
  }

  .search-input:focus::placeholder {
    color: #aaaaaa;
  }

  /* 検索候補とヘルプテキスト */
  .search-suggestion {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: rgba(17, 17, 17, 0.95);
    color: #888888;
    font-size: 0.8rem;
    padding: 0.5rem 1rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-top: none;
    border-radius: 0 0 8px 8px;
    z-index: 10;
    transition: all 0.3s ease;
  }

  /* 検索統計表示 */
  .search-stats {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #111111 0%, #0a0a0a 100%);
    border: 1px solid rgba(74, 158, 255, 0.2);
    border-radius: 8px;
    color: #cccccc;
    font-size: 0.9rem;
    font-family: "Plus Jakarta Sans", sans-serif;
  }

  .clear-search {
    background: transparent;
    color: #4a9eff;
    border: 1px solid #4a9eff;
    padding: 0.4rem 0.8rem;
    border-radius: 4px;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: "Plus Jakarta Sans", sans-serif;
  }

  .clear-search:hover {
    background: #4a9eff;
    color: #000000;
    transform: translateY(-1px);
  }

  .papers-grid {
    display: grid;
    grid-template-columns: repeat(
      auto-fill,
      minmax(380px, 1fr)
    ); /* 改善: カードの最小幅を増加 */
    gap: 2.5rem; /* 改善: より大きなギャップ */
    margin-top: 2rem; /* 改善: マージン調整 */
    padding: 1rem 0.5rem 0 0.5rem; /* 改善: 上部パディングを追加してホバー時の見切れを防止 */
    width: 100%; /* 改善: 幅を明示的に設定 */
    box-sizing: border-box; /* 改善: ボックスサイジングを明示 */
    overflow-x: hidden; /* 改善: 水平スクロールを防止 */
  }

  .paper-card-wrapper {
    opacity: 0;
    transform: translateY(30px) scale(0.95);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform, opacity;
    position: relative;
    z-index: 1;
    isolation: isolate;
    margin-top: 0.5rem; /* 改善: ホバー時の上方向移動に対応したマージン */
  }

  .paper-card-wrapper.animate-in {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  /* ローディング効果 */
  .papers-grid:empty::after {
    content: "読み込み中...";
    display: block;
    text-align: center;
    color: #888888;
    font-size: 0.9rem;
    padding: 3rem;
    font-family: "Plus Jakarta Sans", sans-serif;
    letter-spacing: 0.5px;
  }

  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    background: linear-gradient(135deg, #111111 0%, #0a0a0a 100%);
    border-radius: 0;
    border: 1px solid rgba(255, 255, 255, 0.1);
    margin: 2rem 0;
    position: relative;
    overflow: hidden;
  }

  .empty-state::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, #4a9eff, #66b3ff, #4a9eff);
  }

  .empty-icon {
    font-size: 4rem;
    margin-bottom: 1.5rem;
    filter: grayscale(1) opacity(0.6);
  }

  .empty-state p {
    color: #cccccc;
    font-size: 1rem;
    margin-bottom: 0.75rem;
    font-weight: 300;
    line-height: 1.6;
    font-family: "Plus Jakarta Sans", sans-serif;
  }

  .empty-state p:last-child {
    color: #999999;
    font-size: 0.9rem;
  }

  /* アニメーション */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* タブレット対応 (1024px以下) */
  @media (max-width: 1024px) {
    .hero {
      padding: 2.5rem 1.5rem 2rem 1.5rem;
    }

    .hero h1 {
      font-size: 2.25rem;
    }

    .subtitle {
      font-size: 1rem;
    }

    .stats {
      gap: 1.25rem;
    }

    .stat-item {
      padding: 1.5rem 2rem;
    }

    .papers-grid {
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      gap: 1.75rem;
      padding: 0.75rem 1rem 0 1rem; /* 改善: 上部パディング追加 */
      max-width: 100%; /* 改善: 最大幅を制限 */
    }
  }

  /* モバイル対応 (768px以下) */
  @media (max-width: 768px) {
    .hero {
      padding: 1.75rem 0.75rem 1.25rem 0.75rem;
      margin-bottom: 1.25rem;
    }

    .hero h1 {
      font-size: 1.8rem;
      margin-bottom: 0.75rem;
    }

    .subtitle {
      font-size: 0.85rem;
      margin-bottom: 1.25rem;
    }

    .stats {
      gap: 0.875rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .stat-item {
      padding: 1rem 1.5rem;
      min-width: 100px;
      flex: 1;
      max-width: 140px;
    }

    .stat-number {
      font-size: 1.4rem;
    }

    .stat-label {
      font-size: 0.7rem;
    }

    .controls {
      flex-direction: column;
      align-items: stretch;
      gap: 0.875rem;
      margin-bottom: 1.75rem;
      padding: 0 0.5rem;
    }

    .search-container,
    .filter-container {
      width: 100%;
    }

    .search-suggestion {
      font-size: 0.75rem;
      padding: 0.4rem 0.8rem;
    }

    .search-stats {
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 1rem;
      padding: 0.6rem 1rem;
      font-size: 0.8rem;
    }

    .clear-search {
      padding: 0.3rem 0.6rem;
      font-size: 0.75rem;
    }

    .search-input,
    .filter-select {
      width: 100%;
      min-width: auto;
      padding: 0.875rem 1rem;
      font-size: 0.9rem;
      min-height: 44px;
      box-sizing: border-box;
    }

    .papers-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
      padding: 0.5rem 0.5rem 0 0.5rem; /* 改善: 上部パディング追加 */
      position: relative;
      z-index: 1;
      max-width: 100%; /* 改善: 最大幅を制限 */
      margin-left: auto; /* 改善: センタリング */
      margin-right: auto; /* 改善: センタリング */
    }

    .paper-card-wrapper {
      position: relative;
      z-index: 1;
      margin-bottom: 0;
      clear: both;
      display: block;
      width: 100%;
      transform: none !important;
      opacity: 1 !important;
    }

    .empty-state {
      padding: 2.5rem 1.25rem;
      margin: 1rem 0.5rem;
    }

    .empty-icon {
      font-size: 2.75rem;
      margin-bottom: 1.25rem;
    }

    .empty-state p {
      font-size: 0.85rem;
    }

    .empty-state p:last-child {
      font-size: 0.8rem;
    }
  }

  /* 小型モバイル画面 (480px以下) */
  @media (max-width: 480px) {
    .hero {
      padding: 1.5rem 0.5rem 1rem 0.5rem;
      margin-bottom: 1rem;
    }

    .hero h1 {
      font-size: 1.6rem;
      margin-bottom: 0.625rem;
    }

    .subtitle {
      font-size: 0.8rem;
      margin-bottom: 1rem;
    }

    .stats {
      flex-direction: column;
      gap: 0.625rem;
      align-items: stretch;
    }

    .stat-item {
      padding: 0.875rem 1.25rem;
      min-width: auto;
      max-width: none;
      flex: none;
    }

    .stat-number {
      font-size: 1.25rem;
    }

    .stat-label {
      font-size: 0.65rem;
    }

    .controls {
      padding: 0 0.375rem;
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .search-suggestion {
      font-size: 0.7rem;
      padding: 0.35rem 0.7rem;
    }

    .search-stats {
      padding: 0.5rem 0.8rem;
      font-size: 0.75rem;
      margin-bottom: 0.875rem;
    }

    .clear-search {
      padding: 0.25rem 0.5rem;
      font-size: 0.7rem;
    }

    .search-input,
    .filter-select {
      padding: 0.875rem 1rem;
      font-size: 0.9rem;
      min-height: 44px;
      box-sizing: border-box;
    }

    .papers-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
      padding: 0.5rem 0.5rem 0 0.5rem; /* 改善: 上部パディング追加 */
      position: relative;
      z-index: 1;
      max-width: 100%; /* 改善: 最大幅を制限 */
      margin-left: auto; /* 改善: センタリング */
      margin-right: auto; /* 改善: センタリング */
    }

    .paper-card-wrapper {
      position: relative;
      z-index: 1;
      margin-bottom: 0;
      clear: both;
      display: block;
      width: 100%;
      transform: none !important;
      opacity: 1 !important;
    }

    .empty-state {
      padding: 2rem 1rem;
      margin: 0.875rem 0.375rem;
    }

    .empty-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .empty-state p {
      font-size: 0.8rem;
    }

    .empty-state p:last-child {
      font-size: 0.75rem;
    }
  }

  /* 極小モバイル画面 (360px以下) */
  @media (max-width: 360px) {
    .hero {
      padding: 1.25rem 0.375rem 0.875rem 0.375rem;
      margin-bottom: 0.875rem;
    }

    .hero h1 {
      font-size: 1.45rem;
      margin-bottom: 0.5rem;
    }

    .subtitle {
      font-size: 0.75rem;
      margin-bottom: 0.875rem;
    }

    .stats {
      gap: 0.5rem;
    }

    .stat-item {
      padding: 0.75rem 1rem;
    }

    .stat-number {
      font-size: 1.125rem;
    }

    .stat-label {
      font-size: 0.6rem;
    }

    .controls {
      padding: 0 0.25rem;
      gap: 0.625rem;
      margin-bottom: 1.25rem;
    }

    .search-suggestion {
      font-size: 0.65rem;
      padding: 0.3rem 0.6rem;
    }

    .search-stats {
      padding: 0.4rem 0.6rem;
      font-size: 0.7rem;
      margin-bottom: 0.75rem;
      text-align: center;
    }

    .clear-search {
      padding: 0.2rem 0.4rem;
      font-size: 0.65rem;
    }

    .search-input,
    .filter-select {
      padding: 0.625rem 0.75rem;
      font-size: 0.8rem;
      min-height: 40px;
    }

    .papers-grid {
      padding: 0.25rem 0.25rem 0 0.25rem; /* 改善: 上部パディング追加 */
      gap: 0.75rem;
      max-width: 100%; /* 改善: 最大幅を制限 */
      overflow-x: hidden; /* 改善: 水平スクロールを防止 */
    }

    .empty-state {
      padding: 1.75rem 0.875rem;
      margin: 0.75rem 0.25rem;
    }

    .empty-icon {
      font-size: 2.25rem;
      margin-bottom: 0.875rem;
    }

    .empty-state p {
      font-size: 0.75rem;
    }

    .empty-state p:last-child {
      font-size: 0.7rem;
    }
  }
</style>
