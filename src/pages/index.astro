---
import Layout from "../layouts/Layout.astro";
import PaperCardMD from "../components/PaperCardMD.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import { sortPapersByDate, calculatePaperStats } from "../utils/paper";

type Paper = CollectionEntry<"papers">;

// Content Collectionsから論文を取得
const papers: Paper[] = await getCollection("papers");

// 日付でソート（新しい順）
const sortedPapers = sortPapersByDate(papers);

// 統計情報を計算
const stats = calculatePaperStats(papers);
---

<Layout title="論文メモ">
  <div class="hero">
    <h1>Papers</h1>
    <p class="subtitle">{stats.total} papers collected</p>

    <!-- 統計情報 -->
    <div class="stats">
      <div class="stat-item">
        <span class="stat-number">{stats.thisYear}</span>
        <span class="stat-label">今年</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">{stats.thisMonth}</span>
        <span class="stat-label">今月</span>
      </div>
    </div>
  </div>

  <!-- 検索・フィルター -->
  <div class="controls">
    <div class="search-container">
      <input
        type="text"
        id="search"
        placeholder="論文を検索..."
        class="search-input"
      />
    </div>
    <div class="filter-container">
      <select id="yearFilter" class="filter-select">
        <option value="">全ての年</option>
      </select>
    </div>
  </div>

  <section class="papers-list">
    {
      sortedPapers.length === 0 ? (
        <div class="empty-state">
          <div class="empty-icon">📚</div>
          <p>まだ論文が追加されていません。</p>
          <p>
            src/content/papers/
            ディレクトリにMarkdownファイルを追加してください。
          </p>
        </div>
      ) : (
        <div class="papers-grid" id="papersGrid">
          {sortedPapers.map((paper: Paper, index: number) => (
            <div
              class="paper-card-wrapper"
              style={`--card-index: ${index}; animation-delay: ${index * 0.1}s`}
              data-title={paper.data.title.toLowerCase()}
              data-year={new Date(paper.data.date).getFullYear()}
            >
              <PaperCardMD paper={paper} />
            </div>
          ))}
        </div>
      )
    }
  </section>

  <!-- JavaScriptを直接埋め込み -->
  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      // 検索機能
      const searchInput = document.getElementById("search");
      const yearFilter = document.getElementById("yearFilter");
      const papersGrid = document.getElementById("papersGrid");
      const paperCards = document.querySelectorAll(".paper-card-wrapper");

      if (!searchInput || !yearFilter || !papersGrid) return;

      // モバイルでのタッチサポート改善
      const isMobile = window.innerWidth <= 768;

      if (isMobile) {
        // モバイルでは検索入力時の遅延を短縮
        searchInput.setAttribute("autocomplete", "off");
        searchInput.setAttribute("autocorrect", "off");
        searchInput.setAttribute("autocapitalize", "off");
        searchInput.setAttribute("spellcheck", "false");
      }

      // 年フィルターの選択肢を動的に生成
      const years = [
        ...new Set(
          Array.from(paperCards).map((card) => card.getAttribute("data-year"))
        ),
      ].sort((a, b) => b - a);

      years.forEach((year) => {
        if (year) {
          const option = document.createElement("option");
          option.value = year;
          option.textContent = year + "年";
          yearFilter.appendChild(option);
        }
      });

      // デバウンス機能付きフィルター関数
      let filterTimeout;
      function filterPapers() {
        if (filterTimeout) clearTimeout(filterTimeout);

        const delay = isMobile ? 150 : 50; // モバイルでは少し長めの遅延

        filterTimeout = setTimeout(() => {
          const searchTerm = (searchInput.value || "").toLowerCase();
          const selectedYear = yearFilter.value;

          paperCards.forEach((card) => {
            const title = card.getAttribute("data-title") || "";
            const year = card.getAttribute("data-year") || "";

            const matchesSearch = !searchTerm || title.includes(searchTerm);
            const matchesYear = !selectedYear || year === selectedYear;

            const cardElement = card;
            if (matchesSearch && matchesYear) {
              cardElement.style.display = "block";
              cardElement.style.animation = "fadeInUp 0.3s ease forwards";
            } else {
              cardElement.style.display = "none";
            }
          });
        }, delay);
      }

      searchInput.addEventListener("input", filterPapers);
      yearFilter.addEventListener("change", filterPapers);

      // ページロード時のアニメーション
      paperCards.forEach((card, index) => {
        setTimeout(
          () => {
            card.classList.add("animate-in");
          },
          index * (isMobile ? 50 : 100)
        ); // モバイルでは少し速く
      });

      // カード要素にスタガーアニメーション遅延を適用
      paperCards.forEach((card, index) => {
        card.style.animationDelay = `${index * (isMobile ? 0.03 : 0.05)}s`;
      });

      // モバイルでのスクロール改善
      if (isMobile) {
        // 検索フィールドがフォーカスされた時のスクロール調整
        searchInput.addEventListener("focus", () => {
          setTimeout(() => {
            searchInput.scrollIntoView({
              behavior: "smooth",
              block: "center",
            });
          }, 300); // キーボードが表示されるまで少し待つ
        });
      }
    });
  </script>
</Layout>

<style>
  .hero {
    text-align: center;
    padding: 3rem 0 2rem 0;
    margin-bottom: 2.5rem;
    position: relative;
    background: linear-gradient(
      135deg,
      rgba(74, 158, 255, 0.03) 0%,
      transparent 100%
    );
    border-radius: 0;
  }

  .hero::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 1px;
    background: linear-gradient(90deg, transparent, #4a9eff, transparent);
  }

  .hero h1 {
    font-size: 2.5rem;
    margin: 0 0 0.75rem 0;
    font-weight: 300;
    color: #ffffff;
    letter-spacing: -0.025em;
    font-family: "Plus Jakarta Sans", sans-serif;
    line-height: 1.1;
    position: relative;
  }

  .hero h1::before {
    content: "";
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    width: 40px;
    height: 2px;
    background: linear-gradient(90deg, #4a9eff, #66b3ff);
    opacity: 0.6;
  }

  .subtitle {
    color: #aaaaaa;
    font-size: 0.95rem;
    font-weight: 300;
    margin: 0 0 2rem 0;
    letter-spacing: 0.5px;
    font-family: "Plus Jakarta Sans", sans-serif;
  }

  .stats {
    display: flex;
    justify-content: center;
    gap: 2.5rem;
    margin-top: 2rem;
  }

  .stat-item {
    text-align: center;
    position: relative;
    padding: 1.5rem 2rem;
    background: linear-gradient(135deg, #111111 0%, #0a0a0a 100%);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 0;
    transition: all 0.4s ease;
    min-width: 100px;
    overflow: hidden;
  }

  .stat-item::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(74, 158, 255, 0.05),
      transparent
    );
    transition: left 0.6s ease;
  }

  .stat-item:hover {
    border-color: rgba(74, 158, 255, 0.4);
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(74, 158, 255, 0.15);
  }

  .stat-item:hover::before {
    left: 100%;
  }

  .stat-item::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, #4a9eff, #66b3ff);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.4s ease;
  }

  .stat-item:hover::after {
    transform: scaleX(1);
  }

  .stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 600;
    color: #4a9eff;
    font-family: "Plus Jakarta Sans", sans-serif;
    margin-bottom: 0.5rem;
    line-height: 1;
    transition: all 0.3s ease;
  }

  .stat-item:hover .stat-number {
    color: #66b3ff;
    transform: scale(1.05);
  }

  .stat-label {
    display: block;
    font-size: 0.8rem;
    color: #aaaaaa;
    font-weight: 400;
    letter-spacing: 0.75px;
    text-transform: uppercase;
  }

  .controls {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    margin-bottom: 2.5rem;
    flex-wrap: wrap;
  }

  .search-container,
  .filter-container {
    position: relative;
  }

  .search-container::before,
  .filter-container::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      45deg,
      rgba(74, 158, 255, 0.1) 0%,
      transparent 50%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    border-radius: 0;
  }

  .search-container:hover::before,
  .filter-container:hover::before {
    opacity: 1;
  }

  .search-input,
  .filter-select {
    background: linear-gradient(135deg, #111111 0%, #0a0a0a 100%);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: #ffffff;
    padding: 1rem 1.25rem;
    border-radius: 0;
    font-family: "Plus Jakarta Sans", sans-serif;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    min-width: 220px;
    position: relative;
  }

  .search-input:focus,
  .filter-select:focus {
    outline: none;
    border-color: rgba(74, 158, 255, 0.6);
    box-shadow: 0 0 0 3px rgba(74, 158, 255, 0.1);
    transform: translateY(-2px);
  }

  .search-input::placeholder {
    color: #888888;
    transition: color 0.3s ease;
  }

  .search-input:focus::placeholder {
    color: #aaaaaa;
  }

  .papers-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
    margin-top: 1.5rem;
  }

  .paper-card-wrapper {
    opacity: 0;
    transform: translateY(30px) scale(0.95);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform, opacity;
    position: relative;
    z-index: 1;
    isolation: isolate;
  }

  .paper-card-wrapper.animate-in {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  /* ローディング効果 */
  .papers-grid:empty::after {
    content: "読み込み中...";
    display: block;
    text-align: center;
    color: #888888;
    font-size: 0.9rem;
    padding: 3rem;
    font-family: "Plus Jakarta Sans", sans-serif;
    letter-spacing: 0.5px;
  }

  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    background: linear-gradient(135deg, #111111 0%, #0a0a0a 100%);
    border-radius: 0;
    border: 1px solid rgba(255, 255, 255, 0.1);
    margin: 2rem 0;
    position: relative;
    overflow: hidden;
  }

  .empty-state::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, #4a9eff, #66b3ff, #4a9eff);
  }

  .empty-icon {
    font-size: 4rem;
    margin-bottom: 1.5rem;
    filter: grayscale(1) opacity(0.6);
  }

  .empty-state p {
    color: #cccccc;
    font-size: 1rem;
    margin-bottom: 0.75rem;
    font-weight: 300;
    line-height: 1.6;
    font-family: "Plus Jakarta Sans", sans-serif;
  }

  .empty-state p:last-child {
    color: #999999;
    font-size: 0.9rem;
  }

  /* アニメーション */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    .hero {
      padding: 2rem 1rem 1.5rem 1rem;
      margin-bottom: 1.5rem;
    }

    .hero h1 {
      font-size: 2rem;
    }

    .subtitle {
      font-size: 0.9rem;
      margin-bottom: 1.5rem;
    }

    .stats {
      gap: 1rem;
      flex-wrap: wrap;
    }

    .stat-item {
      padding: 1.25rem 1.5rem;
      min-width: 120px;
      flex: 1;
    }

    .stat-number {
      font-size: 1.5rem;
    }

    .stat-label {
      font-size: 0.75rem;
    }

    .controls {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
      margin-bottom: 2rem;
      padding: 0 0.5rem;
    }

    .search-container,
    .filter-container {
      width: 100%;
    }

    .search-input,
    .filter-select {
      width: 100%;
      min-width: auto;
      padding: 1rem 1.25rem;
      font-size: 1rem;
      min-height: 44px; /* タッチフレンドリー */
      box-sizing: border-box;
    }

    .papers-grid {
      grid-template-columns: 1fr;
      gap: 1.25rem;
      padding: 0 0.5rem;
      position: relative;
      z-index: 1;
    }

    .paper-card-wrapper {
      position: relative;
      z-index: 1;
      margin-bottom: 0;
      clear: both;
      display: block;
      width: 100%;
      transform: none !important; /* モバイルでアニメーション無効化 */
      opacity: 1 !important;
    }

    .empty-state {
      padding: 3rem 1.5rem;
      margin: 1rem 0.5rem;
    }

    .empty-icon {
      font-size: 3rem;
    }

    .empty-state p {
      font-size: 0.9rem;
    }
  }

  /* 小さなモバイル画面用の追加スタイル */
  @media (max-width: 480px) {
    .hero {
      padding: 1.5rem 0.75rem 1rem 0.75rem;
    }

    .hero h1 {
      font-size: 1.75rem;
    }

    .subtitle {
      font-size: 0.85rem;
    }

    .stats {
      flex-direction: column;
      gap: 0.75rem;
    }

    .stat-item {
      padding: 1rem 1.25rem;
      min-width: auto;
    }

    .stat-number {
      font-size: 1.25rem;
    }

    .controls {
      padding: 0 0.25rem;
    }

    .search-input,
    .filter-select {
      padding: 0.875rem 1rem;
      font-size: 0.95rem;
    }

    .papers-grid {
      padding: 0 0.25rem;
      gap: 1rem;
      position: relative;
      z-index: 1;
    }

    .paper-card-wrapper {
      position: relative;
      z-index: 1;
      margin-bottom: 0;
      clear: both;
      display: block;
      width: 100%;
      transform: none !important; /* モバイルでアニメーション無効化 */
      opacity: 1 !important;
    }

    .empty-state {
      padding: 2rem 1rem;
      margin: 1rem 0.25rem;
    }
  }
</style>
