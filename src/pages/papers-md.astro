---
import Layout from "../layouts/Layout.astro";
import PaperCardMD from "../components/PaperCardMD.astro";
import { getCollection } from "astro:content";

// Content Collectionsから論文を取得
const papers = await getCollection("papers");

// 読了日でソート（新しい順）
const sortedPapers = papers.sort(
  (a: any, b: any) =>
    new Date(b.data.readDate).getTime() - new Date(a.data.readDate).getTime()
);

const tags = [...new Set(papers.flatMap((p: any) => p.data.tags))].sort();
---

<Layout title="論文一覧 - 論文メモ">
  <div class="page-header">
    <h1>📚 論文一覧</h1>
    <p>読んだ論文の一覧です。Markdownファイルから自動生成されています。</p>
  </div>

  <div class="stats-bar">
    <div class="stat">
      <span class="stat-number">{sortedPapers.length}</span>
      <span class="stat-label">論文数</span>
    </div>
    <div class="stat">
      <span class="stat-number"
        >{sortedPapers.filter((p: any) => p.data.rating >= 4).length}</span
      >
      <span class="stat-label">高評価論文</span>
    </div>
    <div class="stat">
      <span class="stat-number">{tags.length}</span>
      <span class="stat-label">タグ数</span>
    </div>
  </div>

  <div class="tag-cloud">
    <h3>タグ一覧</h3>
    <div class="tags">
      {
        tags.map((tag: any) => (
          <span class="tag" data-tag={tag}>
            {tag}
          </span>
        ))
      }
    </div>
  </div>

  <div class="papers-container">
    {sortedPapers.map((paper: any) => <PaperCardMD paper={paper} />)}
  </div>

  {
    sortedPapers.length === 0 && (
      <div class="empty-state">
        <h3>論文がまだ追加されていません</h3>
        <p>
          src/content/papers/ ディレクトリにMarkdownファイルを追加してください。
        </p>
        <div class="example">
          <h4>ファイル例:</h4>
          <pre>
            <code>src/content/papers/my-paper.md</code>
          </pre>
        </div>
      </div>
    )
  }
</Layout>

<script>
  // タグクリックでフィルタリング（簡易版）
  const tags = document.querySelectorAll(".tag");
  const papers = document.querySelectorAll(".paper-card");

  let selectedTag = "";

  tags.forEach((tag) => {
    tag.addEventListener("click", () => {
      const tagName = (tag as HTMLElement).dataset.tag;

      if (selectedTag === tagName) {
        // 同じタグをクリックした場合は解除
        selectedTag = "";
        tag.classList.remove("active");
        showAllPapers();
      } else {
        // 新しいタグを選択
        tags.forEach((t) => t.classList.remove("active"));
        tag.classList.add("active");
        selectedTag = tagName || "";
        filterPapersByTag(tagName);
      }
    });
  });

  function showAllPapers() {
    papers.forEach((paper) => {
      (paper as HTMLElement).style.display = "block";
    });
  }

  function filterPapersByTag(tagName: any) {
    papers.forEach((paper) => {
      const paperTags = Array.from(paper.querySelectorAll(".tag")).map(
        (t) => t.textContent
      );
      if (paperTags.includes(tagName)) {
        (paper as HTMLElement).style.display = "block";
      } else {
        (paper as HTMLElement).style.display = "none";
      }
    });
  }
</script>

<style>
  .page-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .page-header h1 {
    font-size: 2.5rem;
    margin: 0 0 0.5rem 0;
    color: #1e293b;
  }

  .page-header p {
    color: #64748b;
    font-size: 1.125rem;
    margin: 0;
  }

  .stats-bar {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    color: #3b82f6;
    line-height: 1;
  }

  .stat-label {
    font-size: 0.875rem;
    color: #64748b;
    font-weight: 500;
  }

  .tag-cloud {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    margin-bottom: 2rem;
  }

  .tag-cloud h3 {
    margin: 0 0 1rem 0;
    color: #1e293b;
    font-size: 1.125rem;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background: #f1f5f9;
    color: #475569;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    border: 2px solid transparent;
  }

  .tag:hover {
    background: #e2e8f0;
    transform: translateY(-2px);
  }

  .tag.active {
    background: #3b82f6;
    color: white;
    border-color: #2563eb;
  }

  .papers-container {
    display: grid;
    gap: 1.5rem;
  }

  .empty-state {
    text-align: center;
    padding: 3rem;
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
  }

  .empty-state h3 {
    margin: 0 0 1rem 0;
    color: #374151;
  }

  .empty-state p {
    margin: 0 0 1.5rem 0;
    color: #64748b;
  }

  .example {
    background: #f8fafc;
    padding: 1rem;
    border-radius: 6px;
    border: 1px solid #e2e8f0;
  }

  .example h4 {
    margin: 0 0 0.5rem 0;
    color: #374151;
    font-size: 0.875rem;
  }

  .example pre {
    margin: 0;
    background: #1e293b;
    color: #f8fafc;
    padding: 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
  }

  @media (max-width: 768px) {
    .stats-bar {
      flex-direction: column;
      gap: 1rem;
    }

    .stat-number {
      font-size: 1.5rem;
    }

    .tag-cloud {
      padding: 1rem;
    }

    .tag {
      padding: 0.375rem 0.75rem;
      font-size: 0.75rem;
    }
  }
</style>
